name: CI/CD Pipeline with Gradle

on:
  push:
    branches: ["main"]

env:
  KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  DOCKER_IMAGE: ghcr.io/devheun/hearlers
  DOCKER_CONTAINER: hearlers

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "corretto"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: docker build and push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    needs: build
    runs-on: ["self-hosted"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: setup .env
        run: |
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
          echo "KAKAO_ADMIN_KEY=${{ secrets.KAKAO_ADMIN_KEY }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "SERVER_URL=${{ secrets.SERVER_URL }}" >> .env

      - name: Run Docker Container
        run: |
          sudo docker stop ${{ env.DOCKER_CONTAINER }} && sudo docker rm ${{ env.DOCKER_CONTAINER }} && sudo docker rmi ${{ env.DOCKER_IMAGE }}:latest
          sudo docker run --env-file ./.env --platform linux/amd64 -d -p ${{ secrets.PORT }}:${{ secrets.PORT }} --name ${{ env.DOCKER_CONTAINER }} --network gateway --restart always ${{ env.DOCKER_IMAGE }}:latest
